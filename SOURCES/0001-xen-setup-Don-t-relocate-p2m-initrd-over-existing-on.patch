--- a/arch/x86/xen/mmu.c	2018-12-17 16:05:11.633150396 +0000
+++ b/arch/x86/xen/mmu.c	2018-12-20 11:32:59.439553841 +0000
@@ -2071,7 +2071,7 @@
  * Find a new area for the hypervisor supplied p2m list and relocate the p2m to
  * this area.
  */
-void __init xen_relocate_p2m(void)
+void __init xen_relocate_p2m(phys_addr_t cur_start, phys_addr_t cur_size)
 {
 	phys_addr_t size, new_area, pt_phys, pmd_phys, pud_phys;
 	unsigned long p2m_pfn, p2m_pfn_end, n_frames, pfn, pfn_end;
@@ -2089,7 +2089,7 @@
 	n_pud = roundup(size, PGDIR_SIZE) >> PGDIR_SHIFT;
 	n_frames = n_pte + n_pt + n_pmd + n_pud;
 
-	new_area = xen_find_free_area(PFN_PHYS(n_frames));
+	new_area = xen_find_free_area(PFN_PHYS(n_frames), cur_start, cur_size);
 	if (!new_area) {
 		xen_raw_console_write("Can't find new memory area for p2m needed due to E820 map conflict\n");
 		BUG();
--- a/arch/x86/xen/setup.c	2018-12-17 16:05:12.058143747 +0000
+++ b/arch/x86/xen/setup.c	2018-12-20 11:39:55.791030138 +0000
@@ -636,13 +636,14 @@
 
 /*
  * Find a free area in physical memory not yet reserved and compliant with
- * E820 map.
+ * E820 map and not overlapping with the pre-allocated area.
  * Used to relocate pre-allocated areas like initrd or p2m list which are in
  * conflict with the to be used E820 map.
  * In case no area is found, return 0. Otherwise return the physical address
  * of the area which is already reserved for convenience.
  */
-phys_addr_t __init xen_find_free_area(phys_addr_t size)
+phys_addr_t __init xen_find_free_area(phys_addr_t size, phys_addr_t cur_start,
+                                     phys_addr_t cur_size)
 {
 	unsigned mapcnt;
 	phys_addr_t addr, start;
@@ -653,7 +654,8 @@
 			continue;
 		start = entry->addr;
 		for (addr = start; addr < start + size; addr += PAGE_SIZE) {
-			if (!memblock_is_reserved(addr))
+			if (!memblock_is_reserved(addr) &&
+                           (addr < cur_start || addr >= cur_start + cur_size))
 				continue;
 			start = addr + PAGE_SIZE;
 			if (start + size > entry->addr + entry->size)
@@ -726,7 +728,7 @@
 	xen_raw_console_write("Xen hypervisor allocated p2m list conflicts with E820 map\n");
 	BUG();
 #else
-	xen_relocate_p2m();
+	xen_relocate_p2m(start, size);
 	memblock_free(start, size);
 #endif
 }
@@ -894,7 +896,9 @@
 				 boot_params.hdr.ramdisk_size)) {
 		phys_addr_t new_area, start, size;
 
-		new_area = xen_find_free_area(boot_params.hdr.ramdisk_size);
+		new_area = xen_find_free_area(boot_params.hdr.ramdisk_size,
+                                             boot_params.hdr.ramdisk_image,
+                                             boot_params.hdr.ramdisk_size);
 		if (!new_area) {
 			xen_raw_console_write("Can't find new memory area for initrd needed due to E820 map conflict\n");
 			BUG();
--- a/arch/x86/xen/xen-ops.h	2018-10-20 10:32:51.000000000 +0000
+++ b/arch/x86/xen/xen-ops.h	2018-12-20 11:45:51.408458066 +0000
@@ -41,14 +41,15 @@
 void xen_mm_pin_all(void);
 void xen_mm_unpin_all(void);
 #ifdef CONFIG_X86_64
-void __init xen_relocate_p2m(void);
+void __init xen_relocate_p2m(phys_addr_t cur_start, phys_addr_t cur_size);
 #endif
 
 bool __init xen_is_e820_reserved(phys_addr_t start, phys_addr_t size);
 unsigned long __ref xen_chk_extra_mem(unsigned long pfn);
 void __init xen_inv_extra_mem(void);
 void __init xen_remap_memory(void);
-phys_addr_t __init xen_find_free_area(phys_addr_t size);
+phys_addr_t __init xen_find_free_area(phys_addr_t size, phys_addr_t cur_start,
+                                     phys_addr_t cur_size);
 char * __init xen_memory_setup(void);
 char * xen_auto_xlated_memory_setup(void);
 void __init xen_arch_setup(void);
